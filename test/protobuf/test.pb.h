// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef PROTOBUF_INCLUDED_test_2eproto
#define PROTOBUF_INCLUDED_test_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_test_2eproto 

namespace protobuf_test_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_test_2eproto
namespace fixbug {
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class FriendList;
class FriendListDefaultTypeInternal;
extern FriendListDefaultTypeInternal _FriendList_default_instance_;
class LoginRequst;
class LoginRequstDefaultTypeInternal;
extern LoginRequstDefaultTypeInternal _LoginRequst_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace fixbug
namespace google {
namespace protobuf {
template<> ::fixbug::Friend* Arena::CreateMaybeMessage<::fixbug::Friend>(Arena*);
template<> ::fixbug::FriendList* Arena::CreateMaybeMessage<::fixbug::FriendList>(Arena*);
template<> ::fixbug::LoginRequst* Arena::CreateMaybeMessage<::fixbug::LoginRequst>(Arena*);
template<> ::fixbug::LoginResponse* Arena::CreateMaybeMessage<::fixbug::LoginResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fixbug {

enum Friend_Sex {
  Friend_Sex_WOMAN = 0,
  Friend_Sex_MAN = 1,
  Friend_Sex_Friend_Sex_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Friend_Sex_Friend_Sex_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Friend_Sex_IsValid(int value);
const Friend_Sex Friend_Sex_Sex_MIN = Friend_Sex_WOMAN;
const Friend_Sex Friend_Sex_Sex_MAX = Friend_Sex_MAN;
const int Friend_Sex_Sex_ARRAYSIZE = Friend_Sex_Sex_MAX + 1;

const ::google::protobuf::EnumDescriptor* Friend_Sex_descriptor();
inline const ::std::string& Friend_Sex_Name(Friend_Sex value) {
  return ::google::protobuf::internal::NameOfEnum(
    Friend_Sex_descriptor(), value);
}
inline bool Friend_Sex_Parse(
    const ::std::string& name, Friend_Sex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Friend_Sex>(
    Friend_Sex_descriptor(), name, value);
}
// ===================================================================

class LoginRequst : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginRequst) */ {
 public:
  LoginRequst();
  virtual ~LoginRequst();

  LoginRequst(const LoginRequst& from);

  inline LoginRequst& operator=(const LoginRequst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequst(LoginRequst&& from) noexcept
    : LoginRequst() {
    *this = ::std::move(from);
  }

  inline LoginRequst& operator=(LoginRequst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequst* internal_default_instance() {
    return reinterpret_cast<const LoginRequst*>(
               &_LoginRequst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginRequst* other);
  friend void swap(LoginRequst& a, LoginRequst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequst* New() const final {
    return CreateMaybeMessage<LoginRequst>(NULL);
  }

  LoginRequst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRequst& from);
  void MergeFrom(const LoginRequst& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes pwd = 2;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:fixbug.LoginRequst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(NULL);
  }

  LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:fixbug.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Friend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.Friend) */ {
 public:
  Friend();
  virtual ~Friend();

  Friend(const Friend& from);

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Friend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Friend* other);
  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(NULL);
  }

  Friend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Friend_Sex Sex;
  static const Sex WOMAN =
    Friend_Sex_WOMAN;
  static const Sex MAN =
    Friend_Sex_MAN;
  static inline bool Sex_IsValid(int value) {
    return Friend_Sex_IsValid(value);
  }
  static const Sex Sex_MIN =
    Friend_Sex_Sex_MIN;
  static const Sex Sex_MAX =
    Friend_Sex_Sex_MAX;
  static const int Sex_ARRAYSIZE =
    Friend_Sex_Sex_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Sex_descriptor() {
    return Friend_Sex_descriptor();
  }
  static inline const ::std::string& Sex_Name(Sex value) {
    return Friend_Sex_Name(value);
  }
  static inline bool Sex_Parse(const ::std::string& name,
      Sex* value) {
    return Friend_Sex_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .fixbug.Friend.Sex sex = 2;
  void clear_sex();
  static const int kSexFieldNumber = 2;
  ::fixbug::Friend_Sex sex() const;
  void set_sex(::fixbug::Friend_Sex value);

  // @@protoc_insertion_point(class_scope:fixbug.Friend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int sex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FriendList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.FriendList) */ {
 public:
  FriendList();
  virtual ~FriendList();

  FriendList(const FriendList& from);

  inline FriendList& operator=(const FriendList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FriendList(FriendList&& from) noexcept
    : FriendList() {
    *this = ::std::move(from);
  }

  inline FriendList& operator=(FriendList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendList* internal_default_instance() {
    return reinterpret_cast<const FriendList*>(
               &_FriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FriendList* other);
  friend void swap(FriendList& a, FriendList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FriendList* New() const final {
    return CreateMaybeMessage<FriendList>(NULL);
  }

  FriendList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FriendList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FriendList& from);
  void MergeFrom(const FriendList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fixbug.Friend friendlist = 1;
  int friendlist_size() const;
  void clear_friendlist();
  static const int kFriendlistFieldNumber = 1;
  ::fixbug::Friend* mutable_friendlist(int index);
  ::google::protobuf::RepeatedPtrField< ::fixbug::Friend >*
      mutable_friendlist();
  const ::fixbug::Friend& friendlist(int index) const;
  ::fixbug::Friend* add_friendlist();
  const ::google::protobuf::RepeatedPtrField< ::fixbug::Friend >&
      friendlist() const;

  // @@protoc_insertion_point(class_scope:fixbug.FriendList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::fixbug::Friend > friendlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_test_2eproto::TableStruct;
};
// ===================================================================

class LoginService_Stub;

class LoginService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LoginService() {};
 public:
  virtual ~LoginService();

  typedef LoginService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UserLogin(::google::protobuf::RpcController* controller,
                       const ::fixbug::LoginRequst* request,
                       ::fixbug::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::fixbug::FriendList* request,
                       ::fixbug::FriendList* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginService);
};

class LoginService_Stub : public LoginService {
 public:
  LoginService_Stub(::google::protobuf::RpcChannel* channel);
  LoginService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~LoginService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements LoginService ------------------------------------------

  void UserLogin(::google::protobuf::RpcController* controller,
                       const ::fixbug::LoginRequst* request,
                       ::fixbug::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriendList(::google::protobuf::RpcController* controller,
                       const ::fixbug::FriendList* request,
                       ::fixbug::FriendList* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginRequst

// bytes name = 1;
inline void LoginRequst::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::name() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequst.name)
  return name_.GetNoArena();
}
inline void LoginRequst::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequst.name)
}
#if LANG_CXX11
inline void LoginRequst::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginRequst.name)
}
#endif
inline void LoginRequst::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginRequst.name)
}
inline void LoginRequst::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequst.name)
}
inline ::std::string* LoginRequst::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRequst.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRequst.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequst.name)
}

// bytes pwd = 2;
inline void LoginRequst::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginRequst.pwd)
  return pwd_.GetNoArena();
}
inline void LoginRequst::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginRequst.pwd)
}
#if LANG_CXX11
inline void LoginRequst::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginRequst.pwd)
}
#endif
inline void LoginRequst::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginRequst.pwd)
}
inline void LoginRequst::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginRequst.pwd)
}
inline ::std::string* LoginRequst::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginRequst.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.LoginRequst.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginRequst.pwd)
}

// -------------------------------------------------------------------

// LoginResponse

// bool success = 1;
inline void LoginResponse::clear_success() {
  success_ = false;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.success)
  return success_;
}
inline void LoginResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:fixbug.LoginResponse.success)
}

// bytes msg = 2;
inline void LoginResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::msg() const {
  // @@protoc_insertion_point(field_get:fixbug.LoginResponse.msg)
  return msg_.GetNoArena();
}
inline void LoginResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.LoginResponse.msg)
}
#if LANG_CXX11
inline void LoginResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.LoginResponse.msg)
}
#endif
inline void LoginResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.LoginResponse.msg)
}
inline void LoginResponse::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.LoginResponse.msg)
}
inline ::std::string* LoginResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.LoginResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_msg() {
  // @@protoc_insertion_point(field_release:fixbug.LoginResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.LoginResponse.msg)
}

// -------------------------------------------------------------------

// Friend

// bytes name = 1;
inline void Friend::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Friend::name() const {
  // @@protoc_insertion_point(field_get:fixbug.Friend.name)
  return name_.GetNoArena();
}
inline void Friend::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.Friend.name)
}
#if LANG_CXX11
inline void Friend::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.Friend.name)
}
#endif
inline void Friend::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.Friend.name)
}
inline void Friend::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.Friend.name)
}
inline ::std::string* Friend::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.Friend.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Friend::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.Friend.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Friend::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.Friend.name)
}

// .fixbug.Friend.Sex sex = 2;
inline void Friend::clear_sex() {
  sex_ = 0;
}
inline ::fixbug::Friend_Sex Friend::sex() const {
  // @@protoc_insertion_point(field_get:fixbug.Friend.sex)
  return static_cast< ::fixbug::Friend_Sex >(sex_);
}
inline void Friend::set_sex(::fixbug::Friend_Sex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:fixbug.Friend.sex)
}

// -------------------------------------------------------------------

// FriendList

// repeated .fixbug.Friend friendlist = 1;
inline int FriendList::friendlist_size() const {
  return friendlist_.size();
}
inline void FriendList::clear_friendlist() {
  friendlist_.Clear();
}
inline ::fixbug::Friend* FriendList::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.FriendList.friendlist)
  return friendlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::fixbug::Friend >*
FriendList::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.FriendList.friendlist)
  return &friendlist_;
}
inline const ::fixbug::Friend& FriendList::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.FriendList.friendlist)
  return friendlist_.Get(index);
}
inline ::fixbug::Friend* FriendList::add_friendlist() {
  // @@protoc_insertion_point(field_add:fixbug.FriendList.friendlist)
  return friendlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fixbug::Friend >&
FriendList::friendlist() const {
  // @@protoc_insertion_point(field_list:fixbug.FriendList.friendlist)
  return friendlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fixbug::Friend_Sex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fixbug::Friend_Sex>() {
  return ::fixbug::Friend_Sex_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_test_2eproto
